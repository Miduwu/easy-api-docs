"use strict";(self.webpackChunkbdjs=self.webpackChunkbdjs||[]).push([[757],{9613:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var r=t(9496);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(t),d=o,m=p["".concat(c,".").concat(d)]||p[d]||f[d]||i;return t?r.createElement(m,a(a({ref:n},l),{},{components:t})):r.createElement(m,a({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6868:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(7605),o=(t(9496),t(9613));const i={sidebar_position:7},a="Function Injections",s={unversionedId:"tips/function-injection",id:"tips/function-injection",title:"Function Injections",description:'Some functions allows the execution of child-functions in their scope. We call these functions "Subfunction".',source:"@site/docs/tips/function-injection.md",sourceDirName:"tips",slug:"/tips/function-injection",permalink:"/docs/tips/function-injection",draft:!1,editUrl:"https://github.com/Miduwu/easy-api-docs/tree/new/docs/tips/function-injection.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Using Events",permalink:"/docs/tips/events"},next:{title:"Handler",permalink:"/docs/tips/handler"}},c={},u=[{value:"Setup",id:"setup",level:2},{value:"Supported functions",id:"supported-functions",level:2}],l={toc:u},p="wrapper";function f(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"function-injections"},"Function Injections"),(0,o.kt)("p",null,'Some functions allows the execution of child-functions in their scope. We call these functions "Subfunction".\nTo extend the functionality, we added ',(0,o.kt)("strong",{parentName:"p"},"injections"),'.\nThis option allows to "inject" subfunction to a supported function.'),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const api = new API({\n    dots: false,\n    reverse: false\n})\n\nconst { API, APIFunction, ParamType } = require("easy-api.ts");\n\nclass MyFunc extends APIFunction {\n    name = "$replaceTD";\n    description = "Replaces every \'T\' with \'D\'.";\n    parameters = [{\n        name: "Text",\n        description: "Text to work on.",\n        type: ParamType.String,\n        required: true,    // Whether argument is required.\n        rest: false,       // Whether argument is spread.\n        defaultValue: null // Can be null or string.\n    }] // Do not forget to fill this array if your function has parameters.\n    usage = "$replaceTD[message]" // Example usage.\n    compile = true // Whether compile function arguments at first evaluation.\n    aliases = []   // Function aliases.\n    async run(d, text) {\n        return text.replace(/T/ig, (match) => match === "T" ? "D" : "d");\n    }\n};\nconst $myFunc = new MyFunc();\n$myFunc.init();\n\n// As first argument we pass the target function name.\n// As second argument we pass the subfunction name.\n// As third argument we pass the subfunction data.\napi.functions.inject(\'createCanvas\', $myFunc.name, $myFunc);\n\napi.route({\n    url: \'/hello\',\n    method: \'get\',\n    code: `\n        $createCanvas[\n            $setDimentions[1024;1024]\n            $testCanvas[HI BRO!] # will work\n        ]\n        $testCanvas[GN BRO!] # will not work\n        $reply[\n            $setCode[200]\n            $setType[json]\n            $setBody[{ "hello": "true" }]\n        ]\n    `\n})\n')),(0,o.kt)("h2",{id:"supported-functions"},"Supported functions"),(0,o.kt)("p",null,"This is the list of functions that supports injection."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"$createCanvas"))))}f.isMDXComponent=!0}}]);