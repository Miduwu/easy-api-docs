"use strict";(self.webpackChunkbdjs=self.webpackChunkbdjs||[]).push([[7286],{9613:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),u=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},b=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(n),b=r,m=p["".concat(c,".").concat(b)]||p[b]||l[b]||s;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=b;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var u=2;u<s;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},9576:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var a=n(7605),r=(n(9496),n(9613));const s={sidebar_position:3},o="Using a custom database",i={unversionedId:"tips/custom-db",id:"tips/custom-db",title:"Using a custom database",description:"Save, get and delete variables from the database, using the DatabaseManager.",source:"@site/docs/tips/custom-db.md",sourceDirName:"tips",slug:"/tips/custom-db",permalink:"/docs/tips/custom-db",draft:!1,editUrl:"https://github.com/Miduwu/easy-api-docs/tree/new/docs/tips/custom-db.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Using Events",permalink:"/docs/tips/events"},next:{title:"Custom Functions",permalink:"/docs/tips/custom-funcs"}},c={},u=[{value:"Enabling default database.",id:"enabling-default-database",level:2}],d={toc:u},p="wrapper";function l(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-a-custom-database"},"Using a custom database"),(0,r.kt)("p",null,"Save, get and delete variables from the database, using the DatabaseManager."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://npmjs.com/package/midb"},"midb")," is used as default database.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const { API } = require("easy-api.ts");\nconst { QuickDB } = require("quick.db");\n\nconst api = new API(...);\nconst db = new QuickDB();\napi.db.setDatabase(db);\n// api.db is the DatabaseManager.\n// api.db.db is the database itself.\n\napi.route({\n    url: "/data",\n    method: "GET",\n    code: `\n        // Function usage can change depending of the usage of custom database methods.\n        $setVar[user;Umineko]\n        $reply[\n            $setCode[200]\n            $setType[JSON]\n            $setBody[{\n                user: "$getVar[user]"\n            }]\n        ]\n    `\n});\n\n// Connecting the database manually.\napi.db.db.connect();\n\napi.connect({ port: 5000 });\n')),(0,r.kt)("h2",{id:"enabling-default-database"},"Enabling default database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const { API } = require("easy-api.ts");\n\nconst api = new API(...);\n\napi.route({\n    url: "/data",\n    method: "GET",\n    code: `\n        // Function usage can change depending of the usage of custom database methods.\n        $setVar[user;CGX;main]\n        $reply[\n            $setCode[200]\n            $setType[JSON]\n            $setBody[{\n                user: "$getVar[user;main]"\n            }]\n        ]\n    `\n});\n\n// Connecting the default database.\napi.db.db.start();\n\napi.connect({ port: 5000 });\n')))}l.isMDXComponent=!0}}]);