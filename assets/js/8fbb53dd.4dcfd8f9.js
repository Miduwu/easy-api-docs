"use strict";(self.webpackChunkbdjs=self.webpackChunkbdjs||[]).push([[8810],{9613:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var r=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=c(t),f=a,m=p["".concat(u,".").concat(f)]||p[f]||d[f]||o;return t?r.createElement(m,s(s({ref:n},l),{},{components:t})):r.createElement(m,s({ref:n},l))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=f;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},6688:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=t(7605),a=(t(9496),t(9613));const o={sidebar_position:4},s="Custom Functions",i={unversionedId:"tips/custom-funcs",id:"tips/custom-funcs",title:"Custom Functions",description:"Adding your own function",source:"@site/docs/tips/custom-funcs.md",sourceDirName:"tips",slug:"/tips/custom-funcs",permalink:"/docs/tips/custom-funcs",draft:!1,editUrl:"https://github.com/Miduwu/easy-api-docs/tree/new/docs/tips/custom-funcs.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Using a custom database",permalink:"/docs/tips/custom-db"},next:{title:"Reading",permalink:"/docs/tips/reading"}},u={},c=[{value:"Adding your own function",id:"adding-your-own-function",level:2},{value:"Example",id:"example",level:3},{value:"Subfunctions",id:"subfunctions",level:2},{value:"Using callbacks",id:"using-callbacks",level:2},{value:"Example",id:"example-1",level:3}],l={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-functions"},"Custom Functions"),(0,a.kt)("h2",{id:"adding-your-own-function"},"Adding your own function"),(0,a.kt)("p",null,"Add your own function using the ",(0,a.kt)("inlineCode",{parentName:"p"},"<API>.funcions")," class."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { API, APIFunction, ParamType } = require("easy-api.ts");\n\nclass MyFunc extends APIFunction {\n    name = "$replaceTD";\n    description = "Replaces every \'T\' with \'D\'.";\n    parameters = [{\n        name: "Text",\n        description: "Text to work on.",\n        type: ParamType.String,\n        required: true,    // Whether argument is required.\n        rest: false,       // Whether argument is spread.\n        defaultValue: null // Can be null or string.\n    }] // Do not forget to fill this array if your function has parameters.\n    usage = "$replaceTD[message]" // Example usage.\n    compile = true // Whether compile function arguments at first evaluation.\n    aliases = []   // Function aliases.\n    async run(d, text) {\n        return text.replace(/T/ig, (match) => match === "T" ? "D" : "d");\n    }\n};\nconst $myFunc = new MyFunc();\n$myFunc.init();\n\napi.functions.add($myFunc.name, $myFunc);\n')),(0,a.kt)("h2",{id:"subfunctions"},"Subfunctions"),(0,a.kt)("p",null,"Subfunction are functions that can be executed in certain function scopes.\nThis is appliable for ",(0,a.kt)("inlineCode",{parentName:"p"},"$case")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"$switch")," or canvas functions.\nIf you want to create your own subfunctions, follow the next steps."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { API, APIFunction, Data, ParamType, Util } = require("easy-api.ts");\n\n// Creating our subfunction in: ./function/subFunc.js\n// IMPORTANT TO EXPORT UNDER: export.default\nexport.default = class SubFunc extends APIFunction {\n    name = "$subFunc";\n    description = "Returns \'hi\'.";\n    parameters = []\n    usage = this.name\n    compile = false // You can set this to false if your function has no parameters to speed-up our compilation phase.\n    aliases = []\n    async run(d) {\n        return "hi";\n    }\n};\n\n// Creating our parent function in: ./function/parentFunc.js\n// IMPORTANT TO EXPORT UNDER: export.default\nexport.default = class ParentFunc extends APIFunction {\n    name = "$parentFunc";\n    description = "Allow the execution for $subFunc.";\n    parameters = [{\n        name: "Content",\n        description: "Content to be executed.",\n        type: ParamType.String,\n        required: true,\n        rest: false,\n        defaultValue: null\n    }]\n    usage = "$parentFunc[content]"\n    compile = false // Important to set to false.\n    aliases = []\n    async run(d, content) {\n        /**\n         * We are extending Data to create a sub-data and attach the function\n         * to this cloned data without affecting the parent one.\n         * (allow the execution for the subdata but not for the parent because\n         * function doesn\'t exists there.)\n         * \n         * First parameter are environment variables you create with $let[]\n         * Second parameter are internal variables that ea.ts uses "to work under the hood".\n         */\n        const data = d.extend(d._, d.__);\n\n        // Now load your function source.\n        data.functions.load(__dirname, (fn) => typeof fn.parent !== "undefined" && fn.parent === this.name);\n\n        /**\n         * Now resolve the function argument using an util method.\n         * We pass as first parameter, the cloned data where the function exists\n         * and as second param the code to be parsed.\n         */\n        const result = await Util.resolveCode(data, content);\n\n        // We return the result.\n        return result;\n    }\n};\n\nconst $myFunc = new ParentFunc();\n$myFunc.init();\n\napi.functions.add($myFunc.name, $myFunc);\n')),(0,a.kt)("h2",{id:"using-callbacks"},"Using callbacks"),(0,a.kt)("p",null,"The callbacks are callable functions using the EA.TS interpreter, (custom functions)"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Access to the parameters using: ",(0,a.kt)("inlineCode",{parentName:"p"},"%PARAM_INDEX%"))),(0,a.kt)("h3",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'$function: [throwError;\n    $reply:[\n        $setCode:[%PARAM_0%]\n        $setType:[JSON]\n        $setBody:[{\n            "status": "%PARAM_0%",\n            "error": "%PARAM_1%"\n        }]\n    ]\n    $break\n]\n\n$if:[$not:[$query:[hi]];\n    $call:[throwError;400;Missing parameter: \'hi\']\n]\n\n$reply:[\n    $setCode:[200]\n    $setType:[JSON]\n    $setBody:[{}]\n]\n')))}d.isMDXComponent=!0}}]);